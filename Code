import pandas as pd
import nltk 
import numpy as np
import re

from nltk.stem import WordNetLemmatizer                                  # to perform lemmatization
from sklearn.feature_extraction.text import CountVectorizer              # to perform BOW
from sklearn.metrics.pairwise import cosine_similarity                    # to perform cosine similarity
from nltk import pos_tag                                                 # for parts of speech
from nltk import word_tokenize                                           # to create tokens
from nltk.corpus import stopwords                                        # for stop words

nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('wordnet')
nltk.download('stopwords')

# Sample DataFrame containing questions and answers
data = {'Questions': ['Can you prevent mental health problems?',
                      'What is mental health?',
                      'Are there cures for mental health problems?',
                      'How do I know if I am unwell?',
                      'What do you mean by mental health?'],
        'Answers': ['Yes! We can prevent mental health problems',
                    'Mental health encompasses our emotional, psychological, and social well-being. It profoundly influences our thoughts, feelings, behaviors, and how we handle stress, interact with others, and make choices.',
                    'Mental health disorders are often chronic conditions that require ongoing management and treatment rather than a one-time cure. However, various interventions, therapies, medications, and lifestyle changes can effectively manage symptoms and improve quality of life for individuals with mental health disorders. ',
                    'Some signs and symptoms that may indicate you are struggling with your mental health such as Changes in mood,Changes in behavior,Physical symptoms,Difficulty concentrating,Fatigue or lack of energy,Changes in appetite or weight,Thoughts of self-harm or suicide,Substance abuse',
                    'Answer 5']}

df = pd.DataFrame(data)

# Initializing CountVectorizer with appropriate parameters
cv = CountVectorizer()

# Creating DataFrame (df_bow) from the Bag of Words (BOW) representation
df_bow = cv.fit_transform(df['Questions']).toarray()

def text_normalization(text, stop):
    text = str(text).lower()                        # text to lower case
    spl_char_text = re.sub(r'[^ a-z]','',text)      # removing special characters
    tokens = nltk.word_tokenize(spl_char_text)      # word tokenizing
    lema = WordNetLemmatizer()                     # intializing lemmatization
    tags_list = pos_tag(tokens,tagset=None)         # parts of speech
    lema_words = []                                 # empty list 
    for token,pos_token in tags_list:               # lemmatize according to POS
        if pos_token.startswith('V'):               # Verb
            pos_val = 'v'
        elif pos_token.startswith('J'):             # Adjective
            pos_val = 'a'
        elif pos_token.startswith('R'):             # Adverb
            pos_val = 'r'
        else:
            pos_val = 'n'                           # Noun
        lema_token = lema.lemmatize(token,pos_val)

        if lema_token not in stop: 
            lema_words.append(lema_token)           # appending the lemmatized token into a list
    
    return " ".join(lema_words) 

def chat_bow(text):
    stop = set(stopwords.words('english'))         # Initializing stopwords
    lemma = text_normalization(text, stop)        # calling the function to perform text normalization
    bow = cv.transform([lemma]).toarray()         # applying BOW
    cosine_value = cosine_similarity(df_bow, bow) # calculating cosine similarity
    index_value = cosine_value.argmax()           # getting index value 
    return df['Answers'].loc[index_value]         # return corresponding answer

print(chat_bow('Can you prevent mental health problems?'))
print(chat_bow('What is mental health?'))
print(chat_bow('Are there cures for mental health problems?'))
print(chat_bow('How do I know if I am unwell?'))
print(chat_bow('What do you mean by mental health?'))
